const fs = require('fs');
const path = require('path');

/**
 * Determina o melhor caminho para o banco de dados baseado no ambiente
 */
function getDatabasePath() {
  // Op√ß√µes de caminhos em ordem de prefer√™ncia
  const paths = [
    '/data/production.db',                          // Volume persistente (preferido)
    './data/production.db',                         // Subdiret√≥rio data local
    './prisma/production.db',                       // Diret√≥rio prisma padr√£o
    '/tmp/production.db'                            // Fallback tempor√°rio
  ];

  for (const dbPath of paths) {
    try {
      const dir = path.dirname(path.resolve(dbPath));
      
      // Verificar se o diret√≥rio existe ou pode ser criado
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      
      // Testar permiss√µes de escrita
      const testFile = path.join(dir, '.test-write');
      fs.writeFileSync(testFile, 'test');
      fs.unlinkSync(testFile);
      
      console.log(`‚úÖ Usando caminho do banco: ${dbPath}`);
      return `file:${dbPath}`;
      
    } catch (error) {
      console.log(`‚ö†Ô∏è Caminho ${dbPath} n√£o dispon√≠vel: ${error.message}`);
      continue;
    }
  }
  
  // Se nenhum caminho funcionar, usar o padr√£o do Prisma
  console.log('‚ö†Ô∏è Usando banco em mem√≥ria como fallback');
  return 'file:memory.db';
}

/**
 * Configura a URL do banco dinamicamente
 */
function configureDatabaseUrl() {
  // Se DATABASE_URL j√° est√° configurada e v√°lida, usar ela
  if (process.env.DATABASE_URL && process.env.DATABASE_URL !== 'file:/data/production.db') {
    console.log(`üìä Usando DATABASE_URL configurada: ${process.env.DATABASE_URL}`);
    return process.env.DATABASE_URL;
  }
  
  // Detectar automaticamente o melhor caminho
  const databaseUrl = getDatabasePath();
  
  // Atualizar a vari√°vel de ambiente
  process.env.DATABASE_URL = databaseUrl;
  
  return databaseUrl;
}

module.exports = {
  getDatabasePath,
  configureDatabaseUrl
};